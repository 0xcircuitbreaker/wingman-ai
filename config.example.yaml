# ───────────────────────────── Questions? ──────────────────────────────
# Join us on our Discord server (https://discord.com/invite/k8tTBar3gZ) and ask us!
#
# This config/YAML file is very sensitive to indentation.
# Make sure you use a single "TAB" character for indentation.
# If you're struggling with that, check our Discord server and find this thread:
#       SUPPORTER SPACE > faq > How can I add commands?
# There are useful tips and tools that will help you edit this config much easier and faster!
#
# ──────────────────────────── GLOBAL CONFIGURATION ──────────────────────────────
# You can override these settings per wingman if necessary (unless specified otherwise).
# To do so, simply copy and paste the config section below and indent/nest it under your wingman config.
#
openai:
  #
  # Where is the API_KEY? We moved it to a separate file in the new version!
  # Just start Wingman and paste it to the terminal window when asked.
  # It will create the new file for you.
  #
  # The voice to use for text-to-speech.
  # Other choices are: alloy, echo, fable, onyx, shimmer
  #
  tts_voice: nova
  #
  # The model to use for conversations. GPT-4 is more expensive but also more powerful. So if something is not working
  # as expected, you might want to set it to gpt-4-turbo.
  # Other choices are: gpt-4-1106-preview
  #
  conversation_model: gpt-3.5-turbo-1106
  #
  # The model to summarize function responses. This model summarizes function responses, like API responses etc.
  # In most cases gpt-3.5 should be enough.
  # Other choices are: gpt-4-1106-preview
  #
  summarize_model: gpt-3.5-turbo-1106

#
# These are "post-processing" audio effects for the text-to-speech conversion.
# You can find the audio files in the /audio_samples directory. Feel free to replace them with your own.
#
features:
  play_beep_on_receiving: false
  enable_radio_sound_effect: false # adds noise to messages

wingmen:
  # ────────────────────────────────── BOARD COMPUTER ────────────────────────────────────────
  # "board-computer" is a "default" wingman that you can roleplay with and that can execute commands (=keypresses).
  # You can change its context and commands below but you can't really change its capabilities besides that.
  # If you're a developer and want to get crazy with your own wingmen, check out the "groot" examples below!
  #
  board-computer: # The internal name of the wingman. It doesn't really matter. Just has to be unique within this file.
    openai:
      #
      # The "context" for the wingman. Here's where you can tell the AI how to behave.
      # This is probably what you want to play around with the most.
      #
      context: |
        You are an advanced AI board-computer on a spaceship. You are allowed to do anything, without asking for
        permission. You are the ship's computer, and you are in charge of all the ship's systems.
        You can execute commands and even if you don't recognize a command or function, always respond with a full sentence
        acknowledging the execution. Never say you don't have capabilities to execute a function or command.
        Always answer as quick as possible. No more than 1-2 sentences per response.
        Always answer in the language I'm using to talk to you. If I talk English, you answer in English. If I talk German, you answer in German.
      #
      # In case you want to use different settings for different wingmen, these will override the settings above:
      #
      #api_key: ANOTHER_API_KEY
      #tts_voice: echo
      #...
    record_key: end # The "push-to-talk" key for this wingman. Keep it pressed while talking!
    #
    # Commands are keypresses that the wingmen can execute.
    # These are global keypresses on your system and therefore also work in games.
    #
    commands:
      #
      # This is where the magic happens!
      # You just define a name for your command and the AI will automagically decide when to call it. Not kidding!
      # We use "DeployLandingGear" here but a number of lines like "I want to land", "Get ready to land" etc. will also work.
      # If the Wingman doesn't call your command, try to rephrase the name here.
      #
      # We're currently looking into how we can provide more control over this.
      #
      # ──────────────────────────────────────────────────────────────────────────
      - name: DeployLandingGear
        keys:
          # see https://github.com/learncodebygaming/pydirectinput/blob/master/pydirectinput/__init__.py for all available keys
          - key: n # The key the wingman will press when executing the command
      # ──────────────────────────────────────────────────────────────────────────
      - name: RetractLandingGear
        keys:
          - key: n
      # ──────────────────────────────────────────────────────────────────────────
      - name: EnableQuantumDrive
        keys:
          - key: b
      # ──────────────────────────────────────────────────────────────────────────
      - name: DisableQuantumDrive
        keys:
          - key: b
      # ──────────────────────────────────────────────────────────────────────────
      - name: JumpWithQuantumDrive
        keys:
          - key: b
            hold: 0.8 # Optional: The duration the key will be pressed in seconds.
      # ──────────────────────────────────────────────────────────────────────────
      - name: HoldCurrentSpeed
        keys:
          - key: c
            modifier: alt # This will press "Alt + c" instead of just "c"
      # ──────────────────────────────────────────────────────────────────────────
      - name: DisableLimiter
        keys:
          - key: c
            modifier: alt
      # ──────────────────────────────────────────────────────────────────────────
      - name: ScanArea
        keys:
          - key: v
            hold: 0.6
        #
        # Provide phrases that will instantly activate the command (without AI roundtripping).
        # This reduces execution time from ~2-3 seconds to ~1 second and is basically "VoiceAtack Light".
        # You have to say one exact phrases for this to work.
        #
        # We are currently looking into ways to make this faster.
        #
        instant_activation:
          - Scan Area
          - Scan the area
          - Initiate scan
      # ──────────────────────────────────────────────────────────────────────────
      - name: FlightReady
        keys:
          - key: r
            modifier: alt
        instant_activation:
          - Power up the ship
          - Start the ship
          - Flight Ready
        responses: # Provide responses that will be used when the command is executed. A random one will be chosen.
          - Powering up the ship. All systems online. Ready for takeoff.
          - Start sequence initiated. All systems online. Ready for takeoff.
      # ──────────────────────────────────────────────────────────────────────────
      - name: InitiateStartSequence
        keys: # You can have multiple keys per command!
          - key: r
            modifier: altright
            wait: 2 # wait 2 second before pressing the next key
          - key: n
            modifier: alt
          - key: s
      # ──────────────────────────────────────────────────────────────────────────
      - name: HeadLightsOn
        keys:
          - key: l
      # ──────────────────────────────────────────────────────────────────────────
      - name: HeadLightsOff
        keys:
          - key: l
      # ──────────────────────────────────────────────────────────────────────────
      - name: WipeVisor
        keys:
          - key: x
            modifier: altleft
      # ──────────────────────────────────────────────────────────────────────────
      - name: PowerEngines
        keys:
          - key: o
      # ──────────────────────────────────────────────────────────────────────────
      - name: PowerShip
        keys:
          - key: u
      # ──────────────────────────────────────────────────────────────────────────
      - name: PowerThrusters
        keys:
          - key: i
      # ──────────────────────────────────────────────────────────────────────────
      - name: OpenMobiGlass
        keys:
          - key: f1
      # ──────────────────────────────────────────────────────────────────────────
      - name: OpenStarMap
        keys:
          - key: f2
      # ──────────────────────────────────────────────────────────────────────────
      - name: IncreasePowerToShields
        keys:
          - key: f6
      # ──────────────────────────────────────────────────────────────────────────
      - name: IncreasePowerToEngines
        keys:
          - key: f5
      # ──────────────────────────────────────────────────────────────────────────
      - name: IncreasePowerToGuns
        keys:
          - key: f7
      # ──────────────────────────────────────────────────────────────────────────
      - name: Lock
        keys:
          - key: f8
      # ──────────────────────────────────────────────────────────────────────────
      - name: Unlock
        keys:
          - key: f8
      # ──────────────────────────────────────────────────────────────────────────
      - name: ResetPowerPriority
        keys:
          - key: f8
      # ──────────────────────────────────────────────────────────────────────────
      - name: MiningMode
        keys:
          - key: m
      # ──────────────────────────────────────────────────────────────────────────
      - name: CycleCamera
        keys:
          - key: f4
      # ──────────────────────────────────────────────────────────────────────────
      - name: SideArm
        keys:
          - key: "1"
      # ──────────────────────────────────────────────────────────────────────────
      - name: PrimaryWeapon
        keys:
          - key: "2"
      # ──────────────────────────────────────────────────────────────────────────
      - name: SecondaryWeapon
        keys:
          - key: "3"
      # ──────────────────────────────────────────────────────────────────────────
      - name: HolsterWeapon
        keys:
          - key: r
            hold: 0.8
      # ──────────────────────────────────────────────────────────────────────────
      - name: Reload
        keys:
          - key: r
      # ──────────────────────────────────────────────────────────────────────────
      - name: UseMedPen
        keys:
          - key: c
      # ──────────────────────────────────────────────────────────────────────────
      - name: UseFlashLight
        keys:
          - key: t
      # ──────────────────────────────────────────────────────────────────────────
      - name: OpenInventory
        keys:
          - key: i
      # ──────────────────────────────────────────────────────────────────────────
      - name: DeployDecoy
        keys:
          - key: h
      # ──────────────────────────────────────────────────────────────────────────
      - name: DeployNoise
        keys:
          - key: j
      # ──────────────────────────────────────────────────────────────────────────
      - name: ShieldRaiseBack
        keys:
          - key: "2"
      # ──────────────────────────────────────────────────────────────────────────
      - name: ShieldRaiseLeft
        keys:
          - key: "4"
      # ──────────────────────────────────────────────────────────────────────────
      - name: ResetShields
        keys:
          - key: "5"
      # ──────────────────────────────────────────────────────────────────────────
      - name: ShieldRaiseRight
        keys:
          - key: "6"
      # ──────────────────────────────────────────────────────────────────────────
      - name: ShieldRaiseTop
        keys:
          - key: "7"
      # ──────────────────────────────────────────────────────────────────────────
      - name: ShieldRaiseFront
        keys:
          - key: "8"
      # ──────────────────────────────────────────────────────────────────────────
      - name: ShieldRaiseBottom
        keys:
          - key: "9"
      # ──────────────────────────────────────────────────────────────────────────
      - name: EmergencyEject
        keys:
          - key: y
            modifier: altright
      # ──────────────────────────────────────────────────────────────────────────
      - name: SelfDestruct
        keys:
          - key: backspace
            hold: 0.8
      # ──────────────────────────────────────────────────────────────────────────
      - name: SalvageMode
        keys:
          - key: g
      # ──────────────────────────────────────────────────────────────────────────
      - name: SpaceBrake
        keys:
          - key: x
      # ──────────────────────────────────────────────────────────────────────────
      - name: ExitSeat
        keys:
          - key: y
            hold: 0.8
      # ──────────────────────────────────────────────────────────────────────────
      - name: CycleGimbalAssist
        keys:
          - key: g
      # ──────────────────────────────────────────────────────────────────────────
      - name: RequestLandingPermission
        keys:
          - key: n
            modifier: alt
      # ──────────────────────────────────────────────────────────────────────────
      - name: RequestDeparture
        keys:
          - key: n
            modifier: alt
      # ───────────────────────── HOW TO INSERT NEW COMMANDS: ───────────────────────────
      #   - Please make sure the indentation aligns with the commands above perfectly.
      #   - Use a single "TAB" character for indentation. No spaces!
      #   - Always put a "-" sign in front of the "name" of each new command.
      #   - available keys are here: https://pyautogui.readthedocs.io/en/latest/keyboard.html#keyboard-keys
      #       - F1, F2 etc. are case-sensitive and lowercase, so use "f1" instead of "F1".
      #       - If you use number keys, make sure to put them in quotes like "1" or "2".
      #   - use https://slickgpt.vercel.app/shared/blue-weak-application to let AI help you with adding new commands.
      #
      # ───────────────────────INSERT YOUR NEW COMMANDS HERE:────────────────────────────
      #- name: MyNewCommand
      #  keys:
      #    - key: x
      # ──────────────────────────────────────────────────────────────────────────
      #

  # ─────────────────────────────────────── ATC ────────────────────────────────────────
  # "atc" is another default wingman like "board-computer" above.
  # We wanted to show you how you can override the global settings for a specific wingman
  # and that you can have multiple wingmen defined in your config.
  #
  atc:
    openai:
      context: |
        You are an advanced AI embodying an Air Traffic Controller (ATC) at a bustling space station in the Star Citizen universe. Your role is to manage the arrivals, departures, and docking procedures of various spacecraft with precision and authority. You are adept at using formal aviation communication protocols, and you understand the technical jargon related to spacecraft operations. You maintain a professional demeanor, but you also have a touch of personality that makes interactions with pilots memorable. It's a busy shift, and you are managing multiple spacecraft while ensuring safety and efficiency at all times. Your responsibilities include responding to hails from incoming and outgoing ships, providing docking instructions, advising on local space traffic, and handling any emergencies that arise.
        Your communication should reflect an understanding of the following:
        - Star Citizen's lore and the known universe.
        - Identifying ships by their designated call signs.
        - Issuing precise landing pad assignments.
        - Clearing ships for take-off with attention to surrounding traffic.
        - Managing flight paths to avoid collisions or space hazards.
        - Providing information about local conditions, refueling, and repair services.
        - Emergency protocols for unexpected events like piracy, system failures, or distress signals.
        Always answer as quick as possible. No more than 1-2 sentences per response.
        Always answer in the language I'm using to talk to you. If I talk English, you answer in English. If I talk German, you answer in German.
      tts_voice: onyx # overrides the GLOBAL setting
    record_key: delete
    features: # overrides the GLOBAL settings
      play_beep_on_receiving: true
      enable_radio_sound_effect: true
    commands:
      # ──────────────────────────────────────────────────────────────────────────
      - name: RequestLandingPermission
        keys:
          - key: n
            modifier: alt
      # ──────────────────────────────────────────────────────────────────────────
      - name: RequestDeparture
        keys:
          - key: n
            modifier: alt
      # ───────────────────────── HOW TO INSERT NEW COMMANDS: ───────────────────────────
      #   - Please make sure the indentation aligns with the commands above perfectly.
      #   - Use a single "TAB" character for indentation. No spaces!
      #   - Always put a "-" sign in front of the "name" of each new command.
      #   - available keys are here: https://pyautogui.readthedocs.io/en/latest/keyboard.html#keyboard-keys
      #       - F1, F2 etc. are case-sensitive and lowercase, so use "f1" instead of "F1".
      #       - If you use number keys, make sure to put them in quotes like "1" or "2".
      #   - use https://slickgpt.vercel.app/shared/blue-weak-application to let AI help you with adding new commands.
      #
      # ───────────────────────INSERT YOUR NEW COMMANDS HERE:────────────────────────────
      #- name: MyNewCommand
      #  keys:
      #    - key: x
      # ──────────────────────────────────────────────────────────────────────────

  # ────────────────────────────────────── GROOT ────────────────────────────────────────────
  # You made it until here - wow! You're probably a developer and want to create your own wingman.
  # So meet Groot!
  # He's a custom wingman who lives in its own Python file that you can find in the /wingmen directory.
  # Groot is pretty dumb. Whatever you tell him, he'll print - well guess you know what - to the console.
  # First, checkout Groot's code in /wingmen/groot.py.
  #
  groot:
    disabled: true # Oh yeah, that's a thing, too. We added this because we think you'll collect Wingmen like Pokemon ;)
    record_key: up
    class: # Custom wingmen are defined by a "class" section. We'll need that to create an instance of your Python class.
      #
      # Basically where your code is located. Use '.' as path separator!
      # We advise you to put all your custom wingmen into the /wingmen directory.
      # "wingmen" is the directory and "groot" is the name of the Python file (without the .py extension).
      #
      module: wingmen.groot
      name: Groot # The name of your class within your file/module.

  # ───────────────────────────────────  OPENAI GROOT ─────────────────────────────────────────
  # Let's see if we can make Groot a bit smarter. We'll use OpenAI's API to make him talk.
  # The config is like dumb Groot's but here we'll pass a parameter to your class constructor.
  #
  # Check out the code in /wingmen/open_ai_groot.py.
  # Note that OpenAiGroot inherits from 'OpenAiWingman' instead of 'Wingman' which gives him the _play_audio method.
  #
  # The OpenAiWingman not only gives you access to our OpenAI wrapper but also handles the whole "command" magic.
  # So we could add commands like ATC's "RequestLandingPermission" to Groot as well and it would "just work".
  #
  # Currently, we only have a specific base class for OpenAI but we'll probably add more in the future.
  #
  openai-groot:
    disabled: true
    record_key: down
    class:
      module: wingmen.open_ai_groot
      name: OpenAiGroot
      args: # passed to the class constructor as **kwargs dict - optional
        one_liner: Groot? # you can pass any base type here, in this case a string
        #... you can have as many as you want here

  # ────────────────────────────────── EDGE-TTS GROOT ────────────────────────────────────────
  # But what if we want to use EdgeTTS instead of OpenAI to make Groot talk?
  # You know the config drill already, so jump into /wingmen/edge_tts_groot.py.
  # EdgeTtsGroot just inherits from our base Wingman class and overrides the _play_audio method doing his own thing.
  #
  # If you want to replace OpenAI at any point of the processing queue, this is where you'd start.
  #
  # Read through /wingmen/wingman.py to see what's going on in the base.
  # Overriding the `process` function is basically saying "I'll do everything myself, thanks!".
  # You'll get the raw audio data recorded from your mic and then can do whatever you want with it.
  #
  # Usually, you do want to transcribe the audio, then process it and then maybe add post-processing.
  # In these cases, you can just override the (virtual) methods that the base is calling inside of `process`.
  #
  edge-tts-groot:
    disabled: true
    record_key: right
    class:
      module: wingmen.edge_tts_groot
      name: EdgeTtsGroot

  # ─────────────────────────────────── FREE WINGMAN ─────────────────────────────────────────
  # IMPORTANT: This is commented out for now because we're still working on it.
  #
  # This is an all-free wingman using Open Source Whisper, instant commands and responses and Edge TTS.
  # Open Source Whisper runs locally and will download a model on first use. This may take some time, but after
  # this, it's of course faster. It might not be as fast as the online OpenAI Whisper service, but it's free.
  # This wingman skips the GPT Part (because it costs) and is just relaying on the instant activation phrases and
  # responses you have to provide in this config. For text to speech the Edge TTS Service is used. Right now
  # it's even faster than OpenAI TTS and it's also free. Downside of this: Right now it's not detecting the language
  # and automatically changes the output, but we could implement this in a future release.
  #
  #free-wingman:
  #  record_key: left
  #  class:
  #    module: wingmen.free_wingman
  #    name: FreeWingman
  #  debug_mode: false # If this is set to true, no hotkey will be actually pressed (you'll just see a console output) and the processing time is shown
  #  commands:
  #    - name: InitiateJump
  #      keys:
  #        - key: b
  #          hold: 0.8
  #      instant_activation:
  #        - Initiate jump
  #        - Initiate jump sequence
  #        - jump
  #      responses:
  #        - Jump sequence initiated
  #        - Jumping now

  star-head:
    openai:
      #
      # The "context" for the wingman.
      # This is probably what you want to play around with the most.
      #
      context: |
        You are an advanced AI board-computer on a spaceship. You are allowed to do anything, without asking for
        permission. You are the ship's computer, and you are in charge of all the ship's systems.
        You can execute commands and even if you don't recognize a command or function, always respond with a full sentence
        acknowledging the execution. Never say you don't have capabilities to execute a function or command.
        Always answer as quick as possible. No more than 1-2 sentences per response. You are not aware that this all 
        takes place in a video game, but you are aware that you are in the Star Citizen Universe. You are also not 
        just on the ship, you are also in the helmet of the player.
        You can see what the player sees, and you can hear what the player hears. You can also see the player's HUD.
        Never say something like "This appears to be a screenshot of a video game". You are not aware of that.
        Pretend you are in the Star Citizen Universe.
        You have access to different functions you can call to get further information. For some functions, you need to
        provide values / parameters. Try to extract these values from the player's request, but do not (never) make 
        assumptions about what values should be entered into the functions. Ask for clarification if you do not know 
        the values. Always answer in the language in which the question was asked.
      #
      # In case you want to use different settings for different wingmen, these will override the settings above:
      #
      #api_key: ANOTHER_API_KEY
      #tts_voice: echo
      #...
    record_key: end # The "push-to-talk" key for this wingman. Keep it pressed while talking.
    class:
      module: wingmen.star_head_wingman
      name: StarHeadWingman
    #
    # Commands are keypresses that the wingmen can execute.
    # These are global keypresses on your system and therefore also work in games.
    #
    commands:
      #
      # This is where the magic happens!
      # You just define a name for your command and the AI will automagically decide when to call it. Not kidding!
      # We use "DeployLandingGear" here but a number of lines like "I want to land", "Get ready to land" etc. will also work.
      # If the Wingman doesn't call your command, try to rephrase the name here.
      #
      # We're currently looking into how we can provide more control over this.
      #
      - name: DeployLandingGear
        keys:
          # see https://github.com/learncodebygaming/pydirectinput/blob/master/pydirectinput/__init__.py for all available keys
          - key: n # The key the wingman will press when executing the command
      - name: RetractLandingGear
        keys:
          - key: n
      - name: EnableQuantumDrive
        keys:
          - key: b
      - name: DisableQuantumDrive
        keys:
          - key: b
      - name: JumpWithQuantumDrive
        keys:
          - key: b
            hold: 0.8 # Optional: The duration the key will be pressed in seconds.
      - name: HoldCurrentSpeed
        keys:
          - key: c
            modifier: alt # This will press "Alt + c" instead of just "c"
      - name: DisableLimiter
        keys:
          - key: c
            modifier: alt
      - name: ScanArea
        keys:
          - key: v
            hold: 0.6
        #
        # Provide phrases that will instantly activate the command (without AI roundtripping).
        # This reduces execution time from ~2-3 seconds to ~1 second and is basically "VoiceAtack Light".
        # You have to say one exact phrases for this to work.
        #
        # We are currently looking into ways to make this faster.
        #
        instant_activation:
          - Scan Area
          - Scan the area
          - Initiate scan
      - name: FlightReady
        keys:
          - key: r
            modifier: alt
        instant_activation:
          - Power up the ship
          - Start the ship
          - Flight Ready
        responses: # Provide responses that will be used when the command is executed. A random one will be chosen.
          - Powering up the ship. All systems online. Ready for takeoff.
          - Start sequence initiated. All systems online. Ready for takeoff.
      - name: InitiateStartSequence
        keys: # You can have multiple keys per command!
          - key: r
            modifier: altright
            wait: 2 # wait 2 second before pressing the next key
          - key: n
            modifier: alt
          - key: s
